buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id "org.sonarqube" version "2.6.2"
    id "com.palantir.docker" version "0.20.1"
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

group = 'jp.co.soramitsu.sora'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
    irohaPureVersion = '1.0.0'
    lombokVersion = '1.18.4'
    springSwaggerVersion = '2.9.2'
    commonsLangVersion = '3.8.1'
    aspectjVersion = '1.9.2'
    spongycastleVersion = '1.58.0.0'
    mockitoCoreVersion = '2.23.4'
    hibernateTypesVersion = '2.3.0'
    testContainersVersion = '1.10.6'
    liquibaseVersion = '3.6.2'
    c3p0Version = '0.9.5.2'
    jUnitVersion = '5.3.2'
    jacksonVersion = '2.9.8'
    jsonPathVersion = '2.4.0'
    jUnitPlatformVersion = '1.3.2'
    soraSDKVersion = '0.3.9'
    jjwtVersion = '3.7.0'
    springCloudVersion = 'Greenwich.RELEASE'
    rxjavaVersion = '2.2.6'
    owaspVersion = '1.1.6'

    repoUrl = 'nexus.iroha.tech:19001'
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "com.github.soramitsu:sora-sdk:${soraSDKVersion}"
    compile("com.jayway.jsonpath:json-path:$jsonPathVersion")

    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    compile("io.springfox:springfox-swagger2:${springSwaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${springSwaggerVersion}")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    compile("org.apache.commons:commons-lang3:${commonsLangVersion}")
    compile("com.auth0:java-jwt:$jjwtVersion")
    compile "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"

    // iroha
    compile "com.github.hyperledger.iroha-java:client:$irohaPureVersion"

    //logging
    compile("org.aspectj:aspectjrt:${aspectjVersion}")
    compile("org.aspectj:aspectjweaver:${aspectjVersion}")
    compile "org.owasp:security-logging-logback:$owaspVersion"

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    //tests
    testCompile("org.mockito:mockito-junit-jupiter:$mockitoCoreVersion")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.testcontainers:testcontainers:${testContainersVersion}")
    testCompile("org.testcontainers:postgresql:${testContainersVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${jUnitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${jUnitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}")
    testCompile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    testCompile("org.junit.platform:junit-platform-launcher:${jUnitPlatformVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompile("com.github.hyperledger.iroha-java:testcontainers:$irohaPureVersion") {
        exclude module: 'slf4j-simple'
    }

    // ========== Distributed Tracing ==========
    compile "org.springframework.cloud:spring-cloud-starter-zipkin"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}

docker {
    dependsOn build
    dockerfile new File(rootProject.rootDir, "Dockerfile")
    name "${repoUrl}/sora-middleware/${project.name}:${version}"
    files bootJar.archivePath
    buildArgs(['JAR_FILE': "${bootJar.archiveName}"])
}

sonarqube {
    properties {
        property "sonar.projectKey", "sora:didresolver"
        property "sonar.java.binaries", "${project.projectDir}/build/classes"
        property "sonar.java.libraries", "${project.projectDir}/build/libs"
        property "sonar.java.test.binaries", "${project.projectDir}/build/test-results/test/binary"
        property "sonar.junit.reportsPaths", "${project.projectDir}/build/test-results/**/*.xml"
        property "sonar.jacoco.reportPaths", "${project.projectDir}/build/jacoco/test.exec"
        property "sonar.exclusions", "${project.projectDir}/**/*.txt"
    }
}

test {
    maxParallelForks = 1
    useJUnitPlatform()
    failFast = true
    testLogging {
        events "passed", "skipped", "failed"
    }
    reports {
        junitXml.enabled = true
    }
}

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/coverage.xml")
        csv.enabled false
        html.enabled false
        html.destination file("${buildDir}/reports/html")
    }

    dependsOn(test)
}
