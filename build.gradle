buildscript {
    ext {
        springBootVersion = '2.0.5.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: "jacoco"

jacoco {
    toolVersion = "0.8.1"
    reportsDir = file("$buildDir/customJacocoReportDir")
}

jacocoTestReport {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination file("${buildDir}/reports/coverage.xml")
        csv.enabled false
        html.enabled false
        html.destination file("${buildDir}/reports/html")
    }

    dependsOn(test)
}

group = 'jp.co.soramitsu.sora'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
    lombokVersion = '1.18.2'
    springSwaggerVersion = '2.9.2'
    commonsLangVersion = '3.8'
    aspectjVersion = '1.9.1'
    spongycastleVersion = '1.58.0.0'
    mockitoCoreVersion = '2.22.0'
    hibernateTypesVersion = '2.3.0'
    testContainersVersion = '1.8.3'
    liquibaseVersion = '3.6.2'
    c3p0Version = '0.9.5.2'
    jUnitVersion = '5.3.1'
    jacksonVersion = '2.9.7'
    jUnitPlatformVersion = '1.3.1'
    soraSDKVersion = '3.1'
    springCloudVersion = 'Finchley.RELEASE'
}

repositories {
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    compile "com.github.soramitsu:sora-sdk:${soraSDKVersion}"

    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-validation')
    compile('org.springframework.boot:spring-boot-starter-actuator')
    compile('org.springframework.boot:spring-boot-starter-web')

    compile("io.springfox:springfox-swagger2:${springSwaggerVersion}")
    compile("io.springfox:springfox-swagger-ui:${springSwaggerVersion}")

    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}")

    compile("org.apache.commons:commons-lang3:${commonsLangVersion}")

    //DB
    compile("com.vladmihalcea:hibernate-types-52:${hibernateTypesVersion}")
    compile("org.postgresql:postgresql")
    compile("org.liquibase:liquibase-core:${liquibaseVersion}")

    //logging
    compile("org.aspectj:aspectjrt:${aspectjVersion}")
    compile("org.aspectj:aspectjweaver:${aspectjVersion}")

    compileOnly "org.springframework.boot:spring-boot-configuration-processor"

    //tests
    testCompile("org.mockito:mockito-core:${mockitoCoreVersion}")
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile("org.testcontainers:testcontainers:${testContainersVersion}")
    testCompile("org.testcontainers:postgresql:${testContainersVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-api:${jUnitVersion}")
    testCompile("org.junit.jupiter:junit-jupiter-params:${jUnitVersion}")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:${jUnitVersion}")
    testCompile("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
    testCompile("org.junit.platform:junit-platform-launcher:${jUnitPlatformVersion}")
    compileOnly("org.projectlombok:lombok:${lombokVersion}")
    testCompileOnly("org.projectlombok:lombok:${lombokVersion}")

    // ========== Distributed Tracing ==========
    compile "org.springframework.cloud:spring-cloud-starter-zipkin"
    compile "org.springframework.cloud:spring-cloud-starter-sleuth"
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

task wrapper(type: Wrapper) {
    gradleVersion = '4.8'
}
